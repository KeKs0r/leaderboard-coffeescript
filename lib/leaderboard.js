// Generated by CoffeeScript 1.4.0
(function() {
  var Leaderboard, redis;

  redis = require('redis');

  Leaderboard = (function() {
    var DEFAULT_OPTIONS, DEFAULT_REDIS_OPTIONS;

    Leaderboard.DEFAULT_PAGE_SIZE = 25;

    DEFAULT_OPTIONS = {
      'page_size': Leaderboard.DEFAULT_PAGE_SIZE,
      'reverse': false
    };

    Leaderboard.DEFAULT_REDIS_HOST = 'localhost';

    Leaderboard.DEFAULT_REDIS_PORT = 6379;

    DEFAULT_REDIS_OPTIONS = {
      'host': Leaderboard.DEFAULT_REDIS_HOST,
      'port': Leaderboard.DEFAULT_REDIS_PORT
    };

    function Leaderboard(leaderboard_name, options, redis_options) {
      this.leaderboard_name = leaderboard_name;
      if (options == null) {
        options = DEFAULT_OPTIONS;
      }
      if (redis_options == null) {
        redis_options = DEFAULT_REDIS_OPTIONS;
      }
      this.reverse = options['reverse'];
      this.page_size = options['page_size'];
      if (this.page_size === null || this.page_size < 1) {
        this.page_size = Leaderboard.DEFAULT_PAGE_SIZE;
      }
      this.redis_connection = redis_options['redis_connection'];
      if (this.redis_connection != null) {
        delete redis_options['redis_connection'];
      }
      if (this.redis_connection == null) {
        this.redis_connection = redis.createClient(redis_options['port'], redis_options['host']);
      }
    }

    Leaderboard.prototype.disconnect = function() {
      return this.redis_connection.quit(function(err, reply) {});
    };

    Leaderboard.prototype.delete_leaderboard = function(callback) {
      return this.delete_leaderboard_named(this.leaderboard_name, callback);
    };

    Leaderboard.prototype.delete_leaderboard_named = function(leaderboard_name, callback) {
      var transaction;
      transaction = this.redis_connection.multi();
      transaction.del(leaderboard_name);
      transaction.del(this.member_data_key(leaderboard_name));
      return transaction.exec(function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.rank_member = function(member, score, member_data, callback) {
      if (member_data == null) {
        member_data = null;
      }
      return this.rank_member_in(this.leaderboard_name, member, score, member_data, callback);
    };

    Leaderboard.prototype.rank_member_in = function(leaderboard_name, member, score, member_data, callback) {
      var transaction;
      if (member_data == null) {
        member_data = null;
      }
      transaction = this.redis_connection.multi();
      transaction.zadd(leaderboard_name, score, member);
      if (member_data != null) {
        transaction.hset(this.member_data_key(leaderboard_name), member, member_data);
      }
      return transaction.exec(function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.member_data_for = function(member, callback) {
      return this.member_data_for_in(this.leaderboard_name, member, callback);
    };

    Leaderboard.prototype.member_data_for_in = function(leaderboard_name, member, callback) {
      return this.redis_connection.hget(this.member_data_key(leaderboard_name), member, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.update_member_data = function(member, member_data, callback) {
      return this.update_member_data_for(this.leaderboard_name, member, member_data, callback);
    };

    Leaderboard.prototype.update_member_data_for = function(leaderboard_name, member, member_data, callback) {
      return this.redis_connection.hset(this.member_data_key(leaderboard_name), member, member_data, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.remove_member_data = function(member, callback) {
      return this.remove_member_data_for(this.leaderboard_name, member, callback);
    };

    Leaderboard.prototype.remove_member_data_for = function(leaderboard_name, member, callback) {
      return this.redis_connection.hdel(this.member_data_key(leaderboard_name), member, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.remove_member = function(member, callback) {
      return this.remove_member_from(this.leaderboard_name, member, callback);
    };

    Leaderboard.prototype.remove_member_from = function(leaderboard_name, member, callback) {
      var transaction;
      transaction = this.redis_connection.multi();
      transaction.zrem(leaderboard_name, member);
      transaction.hdel(this.member_data_key(leaderboard_name), member);
      return transaction.exec(function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.total_members = function(callback) {
      return this.total_members_in(this.leaderboard_name, callback);
    };

    Leaderboard.prototype.total_members_in = function(leaderboard_name, callback) {
      return this.redis_connection.zcard(leaderboard_name, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.total_pages = function(page_size, callback) {
      if (page_size == null) {
        page_size = null;
      }
      return this.total_pages_in(this.leaderboard_name, page_size, callback);
    };

    Leaderboard.prototype.total_pages_in = function(leaderboard_name, page_size, callback) {
      if (page_size == null) {
        page_size = null;
      }
      if (page_size == null) {
        page_size = this.page_size;
      }
      return this.redis_connection.zcard(leaderboard_name, function(err, reply) {
        return callback(Math.ceil(reply / page_size));
      });
    };

    Leaderboard.prototype.member_data_key = function(leaderboard_name) {
      return "" + leaderboard_name + ":member_data";
    };

    return Leaderboard;

  })();

  module.exports = Leaderboard;

}).call(this);
