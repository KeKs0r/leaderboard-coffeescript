// Generated by CoffeeScript 1.4.0
(function() {
  var Leaderboard, redis;

  redis = require('redis');

  Leaderboard = (function() {
    var DEFAULT_OPTIONS, DEFAULT_REDIS_OPTIONS;

    Leaderboard.DEFAULT_pageSize = 25;

    DEFAULT_OPTIONS = {
      'pageSize': Leaderboard.DEFAULT_pageSize,
      'reverse': false
    };

    Leaderboard.DEFAULT_REDIS_HOST = 'localhost';

    Leaderboard.DEFAULT_REDIS_PORT = 6379;

    DEFAULT_REDIS_OPTIONS = {
      'host': Leaderboard.DEFAULT_REDIS_HOST,
      'port': Leaderboard.DEFAULT_REDIS_PORT
    };

    function Leaderboard(leaderboardName, options, redisOptions) {
      this.leaderboardName = leaderboardName;
      if (options == null) {
        options = DEFAULT_OPTIONS;
      }
      if (redisOptions == null) {
        redisOptions = DEFAULT_REDIS_OPTIONS;
      }
      this.reverse = options['reverse'];
      this.pageSize = options['pageSize'];
      if (this.pageSize === null || this.pageSize < 1) {
        this.pageSize = Leaderboard.DEFAULT_pageSize;
      }
      this.redisConnection = redisOptions['redis_connection'];
      if (this.redisConnection != null) {
        delete redisOptions['redis_connection'];
      }
      if (this.redisConnection == null) {
        this.redisConnection = redis.createClient(redisOptions['port'], redisOptions['host']);
      }
    }

    Leaderboard.prototype.disconnect = function() {
      return this.redisConnection.quit(function(err, reply) {});
    };

    Leaderboard.prototype.deleteLeaderboard = function(callback) {
      return this.deleteLeaderboardNamed(this.leaderboardName, callback);
    };

    Leaderboard.prototype.deleteLeaderboardNamed = function(leaderboardName, callback) {
      var transaction;
      transaction = this.redisConnection.multi();
      transaction.del(leaderboardName);
      transaction.del(this.memberDataKey(leaderboardName));
      return transaction.exec(function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.rankMember = function(member, score, member_data, callback) {
      if (member_data == null) {
        member_data = null;
      }
      return this.rankMemberIn(this.leaderboardName, member, score, member_data, callback);
    };

    Leaderboard.prototype.rankMemberIn = function(leaderboardName, member, score, member_data, callback) {
      var transaction;
      if (member_data == null) {
        member_data = null;
      }
      transaction = this.redisConnection.multi();
      transaction.zadd(leaderboardName, score, member);
      if (member_data != null) {
        transaction.hset(this.memberDataKey(leaderboardName), member, member_data);
      }
      return transaction.exec(function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.memberDataFor = function(member, callback) {
      return this.memberDataForIn(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.memberDataForIn = function(leaderboardName, member, callback) {
      return this.redisConnection.hget(this.memberDataKey(leaderboardName), member, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.updateMemberData = function(member, member_data, callback) {
      return this.updateMemberDataFor(this.leaderboardName, member, member_data, callback);
    };

    Leaderboard.prototype.updateMemberDataFor = function(leaderboardName, member, member_data, callback) {
      return this.redisConnection.hset(this.memberDataKey(leaderboardName), member, member_data, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.removeMemberData = function(member, callback) {
      return this.remberMemberDataFor(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.remberMemberDataFor = function(leaderboardName, member, callback) {
      return this.redisConnection.hdel(this.memberDataKey(leaderboardName), member, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.removeMember = function(member, callback) {
      return this.removeMemberFrom(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.removeMemberFrom = function(leaderboardName, member, callback) {
      var transaction;
      transaction = this.redisConnection.multi();
      transaction.zrem(leaderboardName, member);
      transaction.hdel(this.memberDataKey(leaderboardName), member);
      return transaction.exec(function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.totalMembers = function(callback) {
      return this.totalMembersIn(this.leaderboardName, callback);
    };

    Leaderboard.prototype.totalMembersIn = function(leaderboardName, callback) {
      return this.redisConnection.zcard(leaderboardName, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.totalPages = function(pageSize, callback) {
      if (pageSize == null) {
        pageSize = null;
      }
      return this.totalPagesIn(this.leaderboardName, pageSize, callback);
    };

    Leaderboard.prototype.totalPagesIn = function(leaderboardName, pageSize, callback) {
      if (pageSize == null) {
        pageSize = null;
      }
      if (pageSize == null) {
        pageSize = this.pageSize;
      }
      return this.redisConnection.zcard(leaderboardName, function(err, reply) {
        return callback(Math.ceil(reply / pageSize));
      });
    };

    Leaderboard.prototype.totalMembersInScoreRange = function(minScore, maxScore, callback) {
      return this.totalMembersInScoreRangeIn(this.leaderboardName, minScore, maxScore, callback);
    };

    Leaderboard.prototype.totalMembersInScoreRangeIn = function(leaderboardName, minScore, maxScore, callback) {
      return this.redisConnection.zcount(leaderboardName, minScore, maxScore, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.changeScoreFor = function(member, delta, callback) {
      return this.changeScoreForMemberIn(this.leaderboardName, member, delta, callback);
    };

    Leaderboard.prototype.changeScoreForMemberIn = function(leaderboardName, member, delta, callback) {
      return this.redisConnection.zincrby(leaderboardName, delta, member, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.rankFor = function(member, callback) {
      return this.rankForIn(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.rankForIn = function(leaderboardName, member, callback) {
      if (this.reverse) {
        return this.redisConnection.zrank(leaderboardName, member, function(err, reply) {
          if (callback && reply) {
            return callback(reply + 1);
          }
        });
      } else {
        return this.redisConnection.zrevrank(leaderboardName, member, function(err, reply) {
          if (callback && reply) {
            return callback(reply + 1);
          }
        });
      }
    };

    Leaderboard.prototype.scoreFor = function(member, callback) {
      return this.scoreForIn(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.scoreForIn = function(leaderboardName, member, callback) {
      return this.redisConnection.zscore(leaderboardName, member, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.checkMember = function(member, callback) {
      return this.checkMemberIn(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.checkMemberIn = function(leaderboardName, member, callback) {
      return this.redisConnection.zscore(leaderboardName, member, function(err, reply) {
        if (callback) {
          return callback(reply != null);
        }
      });
    };

    Leaderboard.prototype.scoreAndRankFor = function(member, callback) {
      return this.scoreAndRankForIn(this.leaderboardName, member, callback);
    };

    Leaderboard.prototype.scoreAndRankForIn = function(leaderboardName, member, callback) {
      var transaction;
      transaction = this.redisConnection.multi();
      transaction.zscore(leaderboardName, member);
      if (this.reverse) {
        transaction.zrank(leaderboardName, member);
      } else {
        transaction.zrevrank(leaderboardName, member);
      }
      return transaction.exec(function(err, replies) {
        var scoreAndRankData;
        if (replies) {
          scoreAndRankData = {};
          if (replies[0] != null) {
            scoreAndRankData['score'] = parseFloat(replies[0]);
          } else {
            scoreAndRankData['score'] = null;
          }
          if (replies[1] != null) {
            scoreAndRankData['rank'] = replies[1] + 1;
          } else {
            scoreAndRankData['rank'] = null;
          }
          scoreAndRankData['member'] = member;
          if (callback) {
            return callback(scoreAndRankData);
          }
        }
      });
    };

    Leaderboard.prototype.removeMembersInScoreRange = function(minScore, maxScore, callback) {
      return this.removeMembersInScoreRangeIn(this.leaderboardName, minScore, maxScore);
    };

    Leaderboard.prototype.removeMembersInScoreRangeIn = function(leaderboardName, minScore, maxScore, callback) {
      return this.redisConnection.zremrangebyscore(leaderboardName, minScore, maxScore, function(err, reply) {
        if (callback) {
          return callback(reply);
        }
      });
    };

    Leaderboard.prototype.memberDataKey = function(leaderboardName) {
      return "" + leaderboardName + ":member_data";
    };

    return Leaderboard;

  })();

  module.exports = Leaderboard;

}).call(this);
